https://www.liaoxuefeng.com/

|---工作区---|               |---版本库-----------------------|
|			 |				 |  stage			master <--HEAD|
|readme.txt  |__git__add__-->| readme.txt					  |
|LICENSE 	 |				 | LICENSE 						  |
|____________|				 |________________________________|

【【时光机穿梭】】
#提交到暂存区
git add readme.txt

#将暂存区的内容提交到版本库
git commit -m "add some words"

#查看暂存区的状态(是否有修改)
git status

#显示从最近到最远的提交日志【查看提交历史，以便确定要回退到哪个版本】
git log
#简略日志
git log --pretty=oneline

#回退到上一个版本
#指向的版本是当前版本：HEAD
#上一个版本：HEAD^ 
#上上个：HEAD^^
#上100个：HEAD~100
#也可以用版本id标识(commit_id)：3628164
git reset --hard HEAD^
git reset --hard 3628164

#用于记录每一次命令【看命令历史，以便确定要回到未来的哪个版本】
git reflog

#查看工作区和版本库里面最新版本的区别：
git diff HEAD -- readme.txt

#丢弃工作区的修改：
git checkout -- readme.txt 

#可以把暂存区的修改撤销掉(unstage),重新放回工作区
git reset HEAD readme.txt


'''
【小结时间】
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file

场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。

场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。
'''

#查看文件内容
cat readme.txt

#编辑文件用vi

#删除本地文件
rm test.txt
#下面有两种选择
#1. 确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit：
git rm test.txt
git commit -m "delete from git"
#2. 删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本
#git checkout用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可"一键还原"
git checkout -- test.txt


【【远程仓库】】
#1. 在本地git关联远程git库, 远程库的名字是origin
git remote add origin git@github.com:KangleWang/learngit.git
#2. 把本地库的所有内容推送到远程库上, 即git push 把当前分支master推送到远程.
#第一次推送master分支时添加-u参数, Git不但会把本地的master分支内容推送的远程新的master分支, 还会把本地的master分支和远程的master分支关联起来, 在以后的推送或者拉取时就可以简化命令.
git push -u origin master
yes
'''
The authenticity of host 'github.com (192.30.253.112)' can't be established.
RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added 'github.com,192.30.253.112' (RSA) to the list of known hosts.
Counting objects: 29, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (25/25), done.
Writing objects: 100% (29/29), 3.29 KiB | 560.00 KiB/s, done.
Total 29 (delta 9), reused 0 (delta 0)
remote: Resolving deltas: 100% (9/9), done.
To github.com:KangleWang/learngit.git
 * [new branch]      master -> master
Branch 'master' set up to track remote branch 'master' from 'origin'.
'''
#3. 以后只要本地作了提交, 就可以通过以下命令把本地master分支的最新修改推送至GitHub, 我拥有真正的分布式版本库啦！
git push origin master

#从远程库克隆
git clone git@github.com:KangleWang/hello-git.git

【【分支】】
#创建dev分支 
#checkout -b dev 表示创并切换 [-b:branch]
git checkout -b dev
#以上一行等于以下两行
#git branch dev [dev分支如果不存在则创建]
#git checkout dev [切换到dev分支,切换后当前是dev分支]

#查看当前分支
git branch dev

#切换到master分支
git checkout master

#合并指定分支到当前分支
git merge dev[在master分支下操作]
#Fast-forward git提示这次合并是"快进模式", 即直接把master指向dev的当前提交, 所以合并速度非常快！ 还有其他合并方式。
#经过测试发现，在dev分支下git merge master时提示Already up to date 但是在master分支下查看文件的时候还是dev分支修改之前的内容。

#删除分支
git branch -d dev

