https://www.liaoxuefeng.com/

|---工作区---|               |---版本库-----------------------|
|			 |				 |  stage			master <--HEAD|
|readme.txt  |__git__add__-->| readme.txt					  |
|LICENSE 	 |				 | LICENSE 						  |
|____________|				 |________________________________|

【【时光机穿梭】】
#提交到暂存区
git add readme.txt

#将暂存区的内容提交到版本库
git commit -m "add some words"

#查看暂存区的状态(是否有修改)
git status

#显示从最近到最远的提交日志【查看提交历史，以便确定要回退到哪个版本】
git log
#简略日志
git log --pretty=oneline
#退出日志状态
:q

#回退到上一个版本
#指向的版本是当前版本：HEAD
#上一个版本：HEAD^ 
#上上个：HEAD^^
#上100个：HEAD~100
#也可以用版本id标识(commit_id)：3628164
git reset --hard HEAD^
git reset --hard 3628164

#用于记录每一次命令【看命令历史，以便确定要回到未来的哪个版本】
git reflog

#查看工作区和版本库里面最新版本的区别：
git diff HEAD -- readme.txt

#丢弃工作区的修改：
git checkout -- readme.txt 

#可以把暂存区的修改撤销掉(unstage),重新放回工作区
git reset HEAD readme.txt


'''
【小结时间】
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file

场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。

场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。
'''

#查看文件内容
cat readme.txt

#编辑文件用vi

#删除本地文件
rm test.txt
#下面有两种选择
#1. 确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit：
git rm test.txt
git commit -m "delete from git"
#2. 删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本
#git checkout用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可"一键还原"
git checkout -- test.txt


【【远程仓库】】
#1. 在本地git关联远程git库, 远程库的名字是origin
git remote add origin git@github.com:KangleWang/learngit.git
#2. 把本地库的所有内容推送到远程库上, 即git push 把当前分支master推送到远程.
#第一次推送master分支时添加-u参数, Git不但会把本地的master分支内容推送的远程新的master分支, 还会把本地的master分支和远程的master分支关联起来, 在以后的推送或者拉取时就可以简化命令.
git push -u origin master
yes
'''
The authenticity of host 'github.com (192.30.253.112)' can't be established.
RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added 'github.com,192.30.253.112' (RSA) to the list of known hosts.
Counting objects: 29, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (25/25), done.
Writing objects: 100% (29/29), 3.29 KiB | 560.00 KiB/s, done.
Total 29 (delta 9), reused 0 (delta 0)
remote: Resolving deltas: 100% (9/9), done.
To github.com:KangleWang/learngit.git
 * [new branch]      master -> master
Branch 'master' set up to track remote branch 'master' from 'origin'.
'''
#3. 以后只要本地作了提交, 就可以通过以下命令把本地master分支的最新修改推送至GitHub, 我拥有真正的分布式版本库啦！
git push origin master

#从远程库克隆
git clone git@github.com:KangleWang/hello-git.git

【【分支】】
#创建dev分支 
#checkout -b dev 表示创并切换 [-b:branch]
git checkout -b dev
#以上一行等于以下两行
#git branch dev [dev分支如果不存在则创建]
#git checkout dev [切换到dev分支,切换后当前是dev分支]

#查看当前分支
git branch dev

#切换到master分支
git checkout master

#合并指定分支到当前分支
git merge dev[在master分支下操作]
#Fast-forward git提示这次合并是"快进模式", 即直接把master指向dev的当前提交, 所以合并速度非常快！ 还有其他合并方式。
#经过测试发现，在dev分支下git merge master时提示Already up to date 但是在master分支下查看文件的时候还是dev分支修改之前的内容。

#删除分支
git branch -d dev

#查看分支合并图
git log --graph

#禁用Fast forward快进合并模式, 因为本次合并要创建一个新的commit, 所以加上-m参数把commit描述写进去。
git merge --no-ff -m "merge with no-ff" dev


【【bug分支】】
#stash功能: 可以把当前工作现场"储藏"起来，等以后恢复现场后继续工作：
git stash
#查看工作现场存到哪去了
git stash list
#恢复工作现场有两个方法
#1. git stash apply 但是恢复后stash内容并不删除, 需要git stash drop来删除
#2. git stash pop 恢复的同时删除stash的内容


#恢复指定stash
git stash apply stash@{0}

#强行删除分支
git branch -D newFeature


【【多人协作】】
#查看远程
git remote
#显示更详细的信息
git remote -v

#master分支是主分支，因此要时刻与远程同步；
#dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；
#bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；
#feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发


#创建远程origin的dev分支到本地
git checkout -b dev origin/dev
#在dev分支上修改, 并push到远程
git add readme.txt
git commot -m "modify on dev"
git push origin dev
#会发现推送失败, 原因是你的试图推送的提交和别人的最新提交有冲突。
#Git提示把最新提交从origin/dev抓下来，然后在本地合并，解决冲突，再推送
git pull
#依然失败，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示去设置dev和origin/dev的链接
git branch --set-upstream dev origin/dev
#再pull就成功了
git pull
#但是此时合并有冲突，需要手动解决，解决方法与分支管理中解决冲突的方法一样。解决后提交，再push


【【Tag】】
#新建一个标签，默认为HEAD，也可以指定一个commit_id；
git tag v1.0

#创建带有说明的标签, 用-a指定标签名, -m指定说明文字：
git tag -a v2.0 -m "version 2.0" commit_id

#通过-s用私钥签名一个标签：
git tag -s v3.0 -m "version 3.0 with PGP singed" commit_id

#查看所有标签
git tag

#查看标签详细信息
git show v1.0

#删除标签: 因为创建的标签都只存储在本地，不会自动推送到远程，所以打错的标签可以在本地安全删除
git tag -d v1.0

#推送某个标签到远程
git push origin v1.0
#或一次性推送全部尚未推送到远程本地标签
git push origin --tags

#删除远程标签需要两步：
#1. 从本地删除标签
git tag -d v1.0
#2. 从远程删除
git push origin :refs/tags/v1.0
#3. 查看是否真的从远程库中删除标签，可以登录GitHub查看
